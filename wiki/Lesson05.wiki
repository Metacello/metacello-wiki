#summary Tutorial Lesson 5: Add third package
#labels Tutorial
#sidebar TOCLessons
||see [Version05 version05:]||[Answer05]||[Answer06]||[Answer07]||[Answer08]||

For version 0.5 we've added an additional package to the mix: 'Example-AddOn':

  [Answer05 (MetacelloTutorialConfig project version: '0.5') spec.]

Of course, the point of specifiying packages in Metacello is to be able to load versions. Here are
a couple examples of loading versions of the Tutorial. If you print the result of each expression, 
you will see the list of packages in load order (note that for the tutorial, we are using the 
MetacelloNullRecordingMCSpecLoader. This class records which packages are loaded and the order that they are loaded in among other things instead of actually loading the packages.

  [Answer06 (MetacelloTutorialConfig project version: '0.1') load.]

  [Answer06 (MetacelloTutorialConfig project version: '0.4') load.]

  [Answer06 (MetacelloTutorialConfig project version: '0.5') load.]

You will note that in each case, all of the packages associated with the version are loaded, which 
is the default. 

If you want to load a subset of the packages in a project, you may list the packages that you
are interested in as an argument to the #load: method:

  [Answer07 (MetacelloTutorialConfig project version: '0.5') load: { 'Example-Tests'. 'Example-Core' }.]

Note that the ordering of the packages is based on the order in which the packages are specified.

If you evaluate the following expression:

  [Answer08 (MetacelloTutorialConfig project version: '0.5') load: { 'Example-Tests'. }.]

Only the package is 'Example-Tests'. By default the packages are ordered, but there are no implicit
dependencies.
||[Lesson06 Lesson 6]||